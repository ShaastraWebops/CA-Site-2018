{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","UserSchema","name","String","email","type","lowercase","required","indexOf","provider","submitted","Boolean","default","role","password","files","taskid","salt","phonenumber","Number","wnumber","college","address","city","state","education","degree","branch","year","postal","pin","previous","prevyear","social","fblink","questions","why","right","past","facebook","github","virtual","get","_id","path","validate","length","value","constructor","findOne","exec","then","user","id","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"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","file":"user.model.js","sourcesContent":["'use strict';\n/*eslint no-invalid-this:0*/\nimport crypto from 'crypto';\nmongoose.Promise = require('bluebird');\nimport mongoose, {Schema} from 'mongoose';\nimport {registerEvents} from './user.events';\n\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\n\nvar UserSchema = new Schema({\n  name: String,\n  email: {\n    type: String,\n    lowercase: true,\n    required() {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  submitted: {type: Boolean, default: false},\n  role: {\n    type: String,\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required() {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  },\n  files: [{\n    taskid: String,\n    name: String\n  }],\n  provider: String,\n  salt: String,\n  phonenumber: Number,\n  wnumber: Number,\n  college: {\n    name: String,\n    address: String,\n    city: String,\n    state: String\n  },\n  education: {\n    degree: String,\n    branch: String,\n    year: String\n  },\n  postal: {\n    address: String,\n    city: String,\n    state: String,\n    pin: String\n  },\n  previous: Boolean,  //whether he had been a CA in a previous year\n  prevyear: {type: String, default: null},\n  social: String,\n  fblink: String,\n  questions: {\n    why: String,\n    right: String,\n    past: String\n  },\n  facebook: {},\n  github: {}\n});\n\n/**\n * Virtuals\n */\n\n// Public profile information\nUserSchema\n  .virtual('profile')\n  .get(function() {\n    return {\n      name: this.name,\n      role: this.role\n    };\n  });\n\n// Non-sensitive info we'll be putting in the token\nUserSchema\n  .virtual('token')\n  .get(function() {\n    return {\n      _id: this._id,\n      role: this.role\n    };\n  });\n\n/**\n * Validations\n */\n\n// Validate empty email\nUserSchema\n  .path('email')\n  .validate(function(email) {\n    if(authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return email.length;\n  }, 'Email cannot be blank');\n\n// Validate empty password\nUserSchema\n  .path('password')\n  .validate(function(password) {\n    if(authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n    return password.length;\n  }, 'Password cannot be blank');\n\n// Validate email is not taken\nUserSchema\n  .path('email')\n  .validate(function(value) {\n    if(authTypes.indexOf(this.provider) !== -1) {\n      return true;\n    }\n\n    return this.constructor.findOne({ email: value }).exec()\n      .then(user => {\n        if(user) {\n          if(this.id === user.id) {\n            return true;\n          }\n          return false;\n        }\n        return true;\n      })\n      .catch(function(err) {\n        throw err;\n      });\n  }, 'The specified email address is already in use.');\n\nvar validatePresenceOf = function(value) {\n  return value && value.length;\n};\n\n/**\n * Pre-save hook\n */\nUserSchema\n  .pre('save', function(next) {\n    // Handle new/update passwords\n    if(!this.isModified('password')) {\n      return next();\n    }\n\n    if(!validatePresenceOf(this.password)) {\n      if(authTypes.indexOf(this.provider) === -1) {\n        return next(new Error('Invalid password'));\n      } else {\n        return next();\n      }\n    }\n\n    // Make salt with a callback\n    this.makeSalt((saltErr, salt) => {\n      if(saltErr) {\n        return next(saltErr);\n      }\n      this.salt = salt;\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\n        if(encryptErr) {\n          return next(encryptErr);\n        }\n        this.password = hashedPassword;\n        return next();\n      });\n    });\n  });\n\n/**\n * Methods\n */\nUserSchema.methods = {\n  /**\n   * Authenticate - check if the passwords are the same\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {Boolean}\n   * @api public\n   */\n  authenticate(password, callback) {\n    if(!callback) {\n      return this.password === this.encryptPassword(password);\n    }\n\n    this.encryptPassword(password, (err, pwdGen) => {\n      if(err) {\n        return callback(err);\n      }\n\n      if(this.password === pwdGen) {\n        return callback(null, true);\n      } else {\n        return callback(null, false);\n      }\n    });\n  },\n\n  /**\n   * Make salt\n   *\n   * @param {Number} [byteSize] - Optional salt byte size, default to 16\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  makeSalt(...args) {\n    let byteSize;\n    let callback;\n    let defaultByteSize = 16;\n\n    if(typeof args[0] === 'function') {\n      callback = args[0];\n      byteSize = defaultByteSize;\n    } else if(typeof args[1] === 'function') {\n      callback = args[1];\n    } else {\n      throw new Error('Missing Callback');\n    }\n\n    if(!byteSize) {\n      byteSize = defaultByteSize;\n    }\n\n    return crypto.randomBytes(byteSize, (err, salt) => {\n      if(err) {\n        return callback(err);\n      } else {\n        return callback(null, salt.toString('base64'));\n      }\n    });\n  },\n\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @param {Function} callback\n   * @return {String}\n   * @api public\n   */\n  encryptPassword(password, callback) {\n    if(!password || !this.salt) {\n      if(!callback) {\n        return null;\n      } else {\n        return callback('Missing password or salt');\n      }\n    }\n\n    var defaultIterations = 10000;\n    var defaultKeyLength = 64;\n    var salt = new Buffer(this.salt, 'base64');\n\n    if(!callback) {\n      // eslint-disable-next-line no-sync\n      return crypto.pbkdf2Sync(password, salt, defaultIterations,\n          defaultKeyLength, 'sha1')\n        .toString('base64');\n    }\n\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength,\n      'sha1', (err, key) => {\n        if(err) {\n          return callback(err);\n        } else {\n          return callback(null, key.toString('base64'));\n        }\n      });\n  }\n};\n\nregisterEvents(UserSchema);\nexport default mongoose.model('User', UserSchema);\n"]}