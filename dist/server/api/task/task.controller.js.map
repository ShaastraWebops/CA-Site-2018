{"version":3,"sources":["api/task/task.controller.js"],"names":["create","apply","getusers","show","gettasks","validationError","res","statusCode","err","status","json","handleError","send","req","newTask","body","save","then","success","message","catch","userid","user","_id","taskid","params","id","error","findById","exec","task","update","$addToSet","pending","msg","nModified","find","users","taskId","tasks"],"mappings":"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","file":"task.controller.js","sourcesContent":["'use strict';\n\nimport Task from './task.model';\nimport User from '../user/user.model';\n\nfunction validationError(res, statusCode) {\n  statusCode = statusCode || 422;\n  return function(err) {\n    return res.status(statusCode).json(err);\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    return res.status(statusCode).send(err);\n  };\n}\n\n/**\n * Get list of users\n * restriction: 'admin'\n */\n\n/**\n * Creates a new user\n */\nexport function create(req, res) {\n  var newTask = new Task(req.body);\n  newTask.save()\n    .then(function() {\n      res.json({success: true, message: 'New Task Created'});\n    })\n    .catch(validationError(res));\n}\n\nexport function apply(req, res) {\n    var userid = req.user._id;\n    var taskid = req.params.id;\n    var error = false;\n    return Task.findById(taskid).exec()\n      .then(task => {\n        if(!task) {\n          res.json({success: false, message : \"No such task available\"});\n        }\n        Task.update({_id:taskid},{$addToSet:{pending: userid}}, function(err,msg){\n        if(err) throw err;\n        if(msg.nModified == 0) //1 in console\n          {\n            res.json({success: false, message: 'Already applied'});\n          }\n          else {\n            res.json({success: true, message: 'Applied'});\n          }\n       });\n\n    });\n}\n\nexport function getusers(req, res) {\n\n  var id = req.params.id;\n  User.find({'files.taskid': id}).exec()\n  .then(users => {\n    if(!users){\n      res.json({success: false, message: \"Users no longer exists\"});\n    }\n    else {\n      res.json({success: true, users: users});\n    }\n  })\n  .catch(handleError(res));\n}\n\nexport function show(req, res) {\n  var taskId = req.params.id;\n\n  return Task.findById(taskId).exec()\n    .then(task => {\n      if(!task) {\n        return res.status(404);\n      }\n      res.json({success: true, task: task});\n    })\n    .catch(handleError(res));\n}\n\nexport function gettasks(req, res) {\n\n  var userid = req.user._id;\n  Task.find({}).exec()\n  .then(tasks => {\n    res.status(200).json({tasks: tasks, userid: userid});\n  })\n  .catch(handleError(res));\n}\n"]}