{"version":3,"sources":["config/seed.js"],"names":["seedDatabaseIfNeeded","seedDB","find","remove","then","thing","create","name","info","console","log","catch","err","email","submitted","role","password","phonenumber","wnumber","college","address","city","state","education","degree","branch","year","postal","pin","previous","social","fblink","questions","why","right","past","provider"],"mappings":"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","file":"seed.js","sourcesContent":["/**\n * Populate DB with sample data on server start\n * to disable, edit config/environment/index.js, and set `seedDB: false`\n */\n\n'use strict';\nimport Thing from '../api/thing/thing.model';\nimport User from '../api/user/user.model';\nimport config from './environment/';\n\nexport default function seedDatabaseIfNeeded() {\n  if(config.seedDB) {\n    Thing.find({}).remove()\n      .then(() => {\n        let thing = Thing.create({\n          name: 'Development Tools',\n          info: 'Integration with popular tools such as Webpack, Gulp, Babel, TypeScript, Karma, '\n                + 'Mocha, ESLint, Node Inspector, Livereload, Protractor, Pug, '\n                + 'Stylus, Sass, and Less.'\n        }, {\n          name: 'Server and Client integration',\n          info: 'Built with a powerful and fun stack: MongoDB, Express, '\n                + 'AngularJS, and Node.'\n        }, {\n          name: 'Smart Build System',\n          info: 'Build system ignores `spec` files, allowing you to keep '\n                + 'tests alongside code. Automatic injection of scripts and '\n                + 'styles into your index.html'\n        }, {\n          name: 'Modular Structure',\n          info: 'Best practice client and server structures allow for more '\n                + 'code reusability and maximum scalability'\n        }, {\n          name: 'Optimized Build',\n          info: 'Build process packs up your templates as a single JavaScript '\n                + 'payload, minifies your scripts/css/images, and rewrites asset '\n                + 'names for caching.'\n        }, {\n          name: 'Deployment Ready',\n          info: 'Easily deploy your app to Heroku or Openshift with the heroku '\n                + 'and openshift subgenerators'\n        });\n        return thing;\n      })\n    .then(() => console.log('finished populating things'))\n    .catch(err => console.log('error populating things', err));\n\n    User.find({}).remove()\n      .then(() => {\n        User.create({\n          name: 'John',\n          email: 'john@mail.com',\n          submitted: true,\n          role: 'user',\n          password: 'john',\n          phonenumber: 123456789,\n          wnumber: 987654321,\n          college: {\n            name: 'Johns College',\n            address: 'Johns Colleges Address',\n            city: 'Johns Colleges city',\n            state: 'city!'\n          },\n          education: {\n            degree: 'Johns degree',\n            branch: 'Johns branch',\n            year: 'year!'\n          },\n          postal: {\n            address: 'Johns address',\n            city: 'Johns city',\n            state: 'Johns state',\n            pin: 'pin!'\n          },\n          previous: false,\n          social: 'Johns social!!!',\n          fblink: 'johnDoe',\n          questions: {\n            why: 'CA is great you have got to be one!!!',\n            right: 'I dont know what this means!',\n            past: 'you dont want to know'\n          }\n        }, {\n          provider: 'local',\n          role: 'admin',\n          name: 'Admin',\n          email: 'admin@example.com',\n          password: 'admin'\n        },\n          {\n            name: 'Daren',\n            email: 'daren@mail.com',\n            submitted: true,\n            role: 'user',\n            password: 'daren',\n            phonenumber: 7892340982,\n            wnumber: 7892340982,\n            college: {\n              name: 'Darens College',\n              address: 'Darens Colleges Address',\n              city: 'Darens Colleges city',\n              state: 'city!'\n            },\n            education: {\n              degree: 'Darens degree',\n              branch: 'Darens branch',\n              year: 'year!'\n            },\n            postal: {\n              address: 'Darens address',\n              city: 'Darens city',\n              state: 'Darens state',\n              pin: 'pin!'\n            },\n            previous: false,\n            social: 'Darens social!!!',\n            fblink: 'daren_fblink',\n            questions: {\n              why: 'Getting famous and also no age restriction so ...!!!',\n              right: 'Even I dont know  what this means!',\n              past: 'I was born yesterday'\n            }\n          })\n        .then(() => console.log('finished populating users'))\n        .catch(err => console.log('error populating users', err));\n      });\n  }\n}\n"]}